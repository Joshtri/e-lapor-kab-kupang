generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100)
  nikNumber     String?  @unique
  contactNumber String?  @db.VarChar(15)
  email         String   @unique @db.VarChar(100)
  password      String   @db.VarChar(255)
  role          Role     @default(PELAPOR)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relasi
  comments      Comment[]
  logs          Log[]
  reports       Report[]
  bugReports    BugReport[]
  notifications Notification[]

  resetPasswordToken   String?   @db.Text
  resetPasswordExpires DateTime?

  // ❌ HAPUS: fields dan references
  opd            OPD?          @relation("UserToOPD")
  sentEmails     Email[]       @relation("SentEmails")
  receivedEmails Email[]       @relation("ReceivedEmails")
  BugComment     BugComment[]
  ChatRoom       ChatRoom[]
  ChatMessage    ChatMessage[]
}

model OPD {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(255) // nama instansi, misalnya "Dinas Kesehatan"
  alamat  String? @db.VarChar(255) // opsional: alamat instansi
  email   String? @unique @db.VarChar(100) // email resmi instansi
  telp    String? @db.VarChar(20) // telepon kantor, bukan staff
  website String? @db.VarChar(100) // opsional: website instansi

  staffUserId Int  @unique
  staff       User @relation("UserToOPD", fields: [staffUserId], references: [id]) // ✅ hanya di sini pakai fields & references

  reports   Report[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  ChatRoom  ChatRoom[]
}

model Report {
  id     Int  @id @default(autoincrement())
  userId Int
  opdId  Int? // mengacu ke userId OPD

  title       String  @db.VarChar(255)
  description String
  location    String  @default("empty")
  category    String
  subcategory String

  priority     Priority
  bupatiStatus Status   @default(PENDING)
  opdStatus    Status?  @default(PENDING)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignedAt  DateTime? // waktu laporan ditugaskan ke OPD
  respondedAt DateTime? // waktu OPD mulai merespon laporan
  isReadByBupati Boolean   @default(false)
  isReadByOpd    Boolean   @default(false) // ✅ Tambahan ini
  
  // Relasi
  comments Comment[]
  logs     Log[]
  user     User      @relation(fields: [userId], references: [id])

  opd   OPD?   @relation(fields: [opdId], references: [id])
  // ✅ Tambahkan ini untuk menyimpan file gambar langsung
  image Bytes?
  // opd      OPD?      @relation("OpdReports", fields: [opdId], references: [userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  reportId  Int
  userId    Int
  comment   String
  createdAt DateTime @default(now())

  report Report @relation(fields: [reportId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Log {
  id        Int      @id @default(autoincrement())
  reportId  Int
  userId    Int
  action    Action
  timestamp DateTime @default(now())

  report Report @relation(fields: [reportId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model BugReport {
  id              Int         @id @default(autoincrement())
  userId          Int
  title           String      @db.VarChar(255)
  description     String
  priorityProblem BugPriority @default(LOW)
  statusProblem   BugStatus   @default(OPEN)
  attachment      Bytes?      // Added attachment field for images and other files
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  bugComments BugComment[] // Add this relation
}

model BugComment {
  id          Int      @id @default(autoincrement())
  bugReportId Int
  userId      Int
  message     String   @db.Text
  createdAt   DateTime @default(now())

  bugReport BugReport @relation(fields: [bugReportId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int? // Untuk user biasa, bisa null jika ditujukan ke OPD
  opdId     Int? // Berisi userId dari OPD
  message   String   @db.VarChar(255)
  link      String?  @db.VarChar(255)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
  // opd  OPD?  @relation(fields: [opdId], references: [userId])
}

model Email {
  id          Int      @id @default(autoincrement())
  senderId    Int // ID of the admin who sent the email
  recipientId Int // ID of the PELAPOR who received the email
  subject     String   @db.VarChar(255)
  content     String   @db.Text
  sentAt      DateTime @default(now())

  // Relations
  sender    User @relation("SentEmails", fields: [senderId], references: [id])
  recipient User @relation("ReceivedEmails", fields: [recipientId], references: [id])
}

model ChatRoom {
  id         Int      @id @default(autoincrement())
  userId     Int // Pelapor
  opdId      Int? // Jika chat ditujukan ke OPD
  isToBupati Boolean // true jika chat ke Bupati
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relasi
  user     User          @relation(fields: [userId], references: [id])
  opd      OPD?          @relation(fields: [opdId], references: [id])
  messages ChatMessage[]
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  roomId    Int
  senderId  Int
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relasi
  room   ChatRoom @relation(fields: [roomId], references: [id])
  sender User     @relation(fields: [senderId], references: [id])
}

enum Role {
  BUPATI
  ADMIN
  PELAPOR
  OPD
}

enum Category {
  INFRASTRUKTUR
  PELAYANAN
  SOSIAL
  LAINNYA
  KEAMANAN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  PENDING
  PROSES
  SELESAI
  DITOLAK
}

enum Action {
  CREATED
  UPDATED
  DELETED
  STATUS_CHANGED
}

enum BugStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}

enum BugPriority {
  LOW
  MEDIUM
  HIGH
}
